version: '3.8'

services:
  # Frontend - React application with nginx
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: fulsk_frontend
    ports:
      - "80:3000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost/api
      - VITE_WS_URL=http://localhost
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend - Node.js API server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fulsk_backend
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://fulsk_user:fulsk_password@postgres:5432/fulsk
      - REDIS_URL=redis://:fulsk_redis_password@redis:6379
      - MQTT_URL=mqtt://mqtt:1883
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - CORS_ORIGIN=http://localhost
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: fulsk_postgres_prod
    environment:
      POSTGRES_DB: fulsk
      POSTGRES_USER: fulsk_user
      POSTGRES_PASSWORD: fulsk_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-timescaledb.sql:/docker-entrypoint-initdb.d/init-timescaledb.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fulsk_user -d fulsk"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: fulsk_redis_prod
    command: redis-server --appendonly yes --requirepass fulsk_redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "fulsk_redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MQTT Broker for IoT devices
  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: fulsk_mqtt_prod
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
    restart: unless-stopped

  # Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: fulsk_nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - ssl

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mqtt_data:
    driver: local
  mqtt_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: fulsk_prod_network
    driver: bridge